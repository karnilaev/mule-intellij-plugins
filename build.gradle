
buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://jcenter.bintray.com/" }
    }
    dependencies {

    }
}

plugins {
    id 'net.researchgate.release' version '2.3.4'
    id "org.jetbrains.intellij" version "0.3.4"
}

subprojects {
    repositories {
        mavenLocal()
	    mavenCentral()
	    maven {
		    url "http://central.maven.org/maven2/"
	    }
	    maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots'
        }
	    maven {
		    url "https://repository.mulesoft.org/releases/"
	    }
        maven {
		    url "http://repository.mulesoft.org/snapshots/"
	    }
	    maven {
		    url "https://repository.mulesoft.org/nexus/content/repositories/releases"
	    }
    }

    apply plugin: 'java'
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
    group = 'org.mule.tooling.intellij'

    task jarSources(type:Jar) {
      from sourceSets.main.allSource
      classifier = 'sources'
    }
    assemble.dependsOn jarSources

    apply plugin: 'org.jetbrains.intellij'
    intellij {
        version = ideaVersion
        updateSinceUntilBuild = false
        downloadSources = true
        sandboxDirectory = "${rootProject.buildDir}/idea-sandbox"

        publish {
            username System.getenv('IJ_REPO_USERNAME')
            password System.getenv('IJ_REPO_PASSWORD')
            channel ijPluginRepoChannel
        }
    }

    dependencies {
        testCompile 'junit:junit:4.+'
    }
}

clean {
    delete rootProject.buildDir
}

release {
    buildTasks = ['doRelease']
    // Do not change the tagTemplate value to double quotes or the version will be evaluated before
    // the SNAPSHOT version is updated to the release version.
    tagTemplate = 'v$version'
    git {
        requireBranch = /^release_v\d+.*$/
    }
}

// We aren't building or doing anything interesting for release.
// We just update the version and generate the tag as CI will handle deployment.
task doRelease {
    doLast {
        println '===============================!!PLEASE READ!!=================================\n\n' +
                'IMPORTANT:  The release command will trigger the creation of a new release ' +
                'in Github, the uploading of binaries to github, and the publishing of our plugin' +
                'to the IntelliJ plugin repository.\n' +
                'Hit CTRL+C to cancel.\n'
    }
}
